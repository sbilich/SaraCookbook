/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const WheelLazyImport = createFileRoute('/wheel')()
const SoupLazyImport = createFileRoute('/soup')()
const SandwichLazyImport = createFileRoute('/sandwich')()
const PastaLazyImport = createFileRoute('/pasta')()
const EntreeLazyImport = createFileRoute('/entree')()
const DrinksLazyImport = createFileRoute('/drinks')()
const DessertLazyImport = createFileRoute('/dessert')()
const CuisineLazyImport = createFileRoute('/cuisine')()

// Create/Update Routes

const WheelLazyRoute = WheelLazyImport.update({
  id: '/wheel',
  path: '/wheel',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/wheel.lazy').then((d) => d.Route))

const SoupLazyRoute = SoupLazyImport.update({
  id: '/soup',
  path: '/soup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/soup.lazy').then((d) => d.Route))

const SandwichLazyRoute = SandwichLazyImport.update({
  id: '/sandwich',
  path: '/sandwich',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/sandwich.lazy').then((d) => d.Route))

const PastaLazyRoute = PastaLazyImport.update({
  id: '/pasta',
  path: '/pasta',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/pasta.lazy').then((d) => d.Route))

const EntreeLazyRoute = EntreeLazyImport.update({
  id: '/entree',
  path: '/entree',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/entree.lazy').then((d) => d.Route))

const DrinksLazyRoute = DrinksLazyImport.update({
  id: '/drinks',
  path: '/drinks',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/drinks.lazy').then((d) => d.Route))

const DessertLazyRoute = DessertLazyImport.update({
  id: '/dessert',
  path: '/dessert',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dessert.lazy').then((d) => d.Route))

const CuisineLazyRoute = CuisineLazyImport.update({
  id: '/cuisine',
  path: '/cuisine',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cuisine.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/cuisine': {
      id: '/cuisine'
      path: '/cuisine'
      fullPath: '/cuisine'
      preLoaderRoute: typeof CuisineLazyImport
      parentRoute: typeof rootRoute
    }
    '/dessert': {
      id: '/dessert'
      path: '/dessert'
      fullPath: '/dessert'
      preLoaderRoute: typeof DessertLazyImport
      parentRoute: typeof rootRoute
    }
    '/drinks': {
      id: '/drinks'
      path: '/drinks'
      fullPath: '/drinks'
      preLoaderRoute: typeof DrinksLazyImport
      parentRoute: typeof rootRoute
    }
    '/entree': {
      id: '/entree'
      path: '/entree'
      fullPath: '/entree'
      preLoaderRoute: typeof EntreeLazyImport
      parentRoute: typeof rootRoute
    }
    '/pasta': {
      id: '/pasta'
      path: '/pasta'
      fullPath: '/pasta'
      preLoaderRoute: typeof PastaLazyImport
      parentRoute: typeof rootRoute
    }
    '/sandwich': {
      id: '/sandwich'
      path: '/sandwich'
      fullPath: '/sandwich'
      preLoaderRoute: typeof SandwichLazyImport
      parentRoute: typeof rootRoute
    }
    '/soup': {
      id: '/soup'
      path: '/soup'
      fullPath: '/soup'
      preLoaderRoute: typeof SoupLazyImport
      parentRoute: typeof rootRoute
    }
    '/wheel': {
      id: '/wheel'
      path: '/wheel'
      fullPath: '/wheel'
      preLoaderRoute: typeof WheelLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cuisine': typeof CuisineLazyRoute
  '/dessert': typeof DessertLazyRoute
  '/drinks': typeof DrinksLazyRoute
  '/entree': typeof EntreeLazyRoute
  '/pasta': typeof PastaLazyRoute
  '/sandwich': typeof SandwichLazyRoute
  '/soup': typeof SoupLazyRoute
  '/wheel': typeof WheelLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cuisine': typeof CuisineLazyRoute
  '/dessert': typeof DessertLazyRoute
  '/drinks': typeof DrinksLazyRoute
  '/entree': typeof EntreeLazyRoute
  '/pasta': typeof PastaLazyRoute
  '/sandwich': typeof SandwichLazyRoute
  '/soup': typeof SoupLazyRoute
  '/wheel': typeof WheelLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/cuisine': typeof CuisineLazyRoute
  '/dessert': typeof DessertLazyRoute
  '/drinks': typeof DrinksLazyRoute
  '/entree': typeof EntreeLazyRoute
  '/pasta': typeof PastaLazyRoute
  '/sandwich': typeof SandwichLazyRoute
  '/soup': typeof SoupLazyRoute
  '/wheel': typeof WheelLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cuisine'
    | '/dessert'
    | '/drinks'
    | '/entree'
    | '/pasta'
    | '/sandwich'
    | '/soup'
    | '/wheel'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cuisine'
    | '/dessert'
    | '/drinks'
    | '/entree'
    | '/pasta'
    | '/sandwich'
    | '/soup'
    | '/wheel'
  id:
    | '__root__'
    | '/'
    | '/cuisine'
    | '/dessert'
    | '/drinks'
    | '/entree'
    | '/pasta'
    | '/sandwich'
    | '/soup'
    | '/wheel'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CuisineLazyRoute: typeof CuisineLazyRoute
  DessertLazyRoute: typeof DessertLazyRoute
  DrinksLazyRoute: typeof DrinksLazyRoute
  EntreeLazyRoute: typeof EntreeLazyRoute
  PastaLazyRoute: typeof PastaLazyRoute
  SandwichLazyRoute: typeof SandwichLazyRoute
  SoupLazyRoute: typeof SoupLazyRoute
  WheelLazyRoute: typeof WheelLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CuisineLazyRoute: CuisineLazyRoute,
  DessertLazyRoute: DessertLazyRoute,
  DrinksLazyRoute: DrinksLazyRoute,
  EntreeLazyRoute: EntreeLazyRoute,
  PastaLazyRoute: PastaLazyRoute,
  SandwichLazyRoute: SandwichLazyRoute,
  SoupLazyRoute: SoupLazyRoute,
  WheelLazyRoute: WheelLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cuisine",
        "/dessert",
        "/drinks",
        "/entree",
        "/pasta",
        "/sandwich",
        "/soup",
        "/wheel"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cuisine": {
      "filePath": "cuisine.lazy.tsx"
    },
    "/dessert": {
      "filePath": "dessert.lazy.tsx"
    },
    "/drinks": {
      "filePath": "drinks.lazy.tsx"
    },
    "/entree": {
      "filePath": "entree.lazy.tsx"
    },
    "/pasta": {
      "filePath": "pasta.lazy.tsx"
    },
    "/sandwich": {
      "filePath": "sandwich.lazy.tsx"
    },
    "/soup": {
      "filePath": "soup.lazy.tsx"
    },
    "/wheel": {
      "filePath": "wheel.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
